# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CoordinateExtractor_dev1
                                 A QGIS plugin
 Extract coordinate form raw text
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-02-03
        git sha              : $Format:%H$
        copyright            : (C) 2019 by a
        email                : a
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QTableWidget, QTableWidgetItem
from qgis.core import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .coord_extractor_dialog import CoordinateExtractor_dev1Dialog
import os.path

from . import coord_extraction_tools as cet
from . import aviation_gis_tools2 as agt



def get_sample_coordinates(order, separator, format):
    lat_D = '74'
    lat_M = '56'
    lat_S = '32.55'
    lat_H = 'N'
    lon_D = '013'
    lon_M = '37'
    lon_S = '38.21'
    lon_H = 'E'

    lat_h = ['74', '56', '32.55', 'N']
    lon_h = ['013', '37', '38.21', 'E']
    h_lat = ['N', '74', '56', '32.55']
    h_lon = ['E', '013', '37', '38.21']

    if order == cet.ORDER_LATLON:
        if format == cet.DMSH_COMP:
            sample = '{}{}{}'.format(''.join(lat_h), separator, ''.join(lon_h))
        elif format == cet.HDMS_COMP:
            sample = '{}{}{}'.format(''.join(h_lat), separator, ''.join(h_lon))
        elif format == cet.DMSH_SEP:
            sample = '{}{}{}'.format(' '.join(lat_h), separator, ' '.join(lon_h))
        elif format == cet.HDMS_SEP:
            sample = '{}{}{}'.format(' '.join(h_lat), separator, ' '.join(h_lon))

    elif order == cet.ORDER_LONLAT:
        if format == cet.DMSH_COMP:
            sample = '{}{}{}{}{}{}{}{}{}'.format(lon_D, lon_M, lon_S, lon_H, separator, lat_D, lat_M, lat_S, lat_H)
        elif format == cet.HDMS_COMP:
            sample = '{}{}{}{}{}{}{}{}{}'.format(lon_H, lon_D, lon_M, lon_S, separator, lat_H, lat_D, lat_M, lat_S)
        elif format == cet.DMSH_SEP:
            sample = '{} {} {} {}{}{} {} {} {}'.format(lon_D, lon_M, lon_S, lon_H, separator, lat_S, lat_D, lat_M,
                                                       lat_H)
        elif format == cet.HDMS_SEP:
            sample = '{} {} {} {}{}{} {} {} {}'.format(lon_H, lon_D, lon_M, lon_S, separator, lat_H, lat_S, lat_D,
                                                       lat_M)
    else:
        sample = ''

    return sample


class CoordinateExtractor_dev1:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.point_mlyr_name = ''
        self.line_mlyr_name = ''
        self.polygon_mlyr_name = ''
        self.coord_order = None
        self.latlon_separator = None
        self.coordinate_format = None
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CoordinateExtractor_dev1_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = CoordinateExtractor_dev1Dialog()
        self.dlg.comboBoxCoordOrder.currentIndexChanged.connect(self.get_sample_coord_pair_format)
        self.dlg.comboBoxCoordSeparator.currentIndexChanged.connect(self.get_sample_coord_pair_format)
        self.dlg.comboBoxCoordFormat.currentIndexChanged.connect(self.get_sample_coord_pair_format)
        # self.dlg.pushButtonExtractCoord.clicked.connect(self.extract_coordinates)
        # self.dlg.pushButtonGetWKTString.clicked.connect(self.get_wkt)
        self.dlg.pushButtonCreateFeature.clicked.connect(self.create_feature)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CoordinateExtractor_dev1')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'CoordinateExtractor_dev1')
        self.toolbar.setObjectName(u'CoordinateExtractor_dev1')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CoordinateExtractor_dev1', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/coord_extractor/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CoordinateExtractor_dev1'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CoordinateExtractor_dev1'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    """ Create memory layers from point, line, polygon """

    @staticmethod
    def create_mlyr(mlyr_name, mlyr_type):
        """ Create temporary 'memory' layer to store results.
        :param lyr_name: string, layer name
        """
        if mlyr_type == 'POINT':
            mlyr = QgsVectorLayer('Point?crs=epsg:4326', mlyr_name, 'memory')
        elif mlyr_type == 'POLYGON':
            mlyr = QgsVectorLayer('Polygon?crs=epsg:4326', mlyr_name, 'memory')

        prov = mlyr.dataProvider()
        mlyr.startEditing()
        prov.addAttributes([QgsField("NAME", QVariant.String)])
        mlyr.commitChanges()
        QgsProject.instance().addMapLayer(mlyr)

    """ Add line, polygon feature to memory layer """

    def add_polygon_feature(self, polygon_geom):
        """ Add feature to layer
        :param: boundary: list, list of QgsPoint objects
        """
        out_lyr = QgsProject.instance().mapLayersByName(self.polygon_mlyr_name)[0]
        self.iface.setActiveLayer(out_lyr)
        out_lyr = self.iface.activeLayer()
        out_lyr.startEditing()
        out_prov = out_lyr.dataProvider()
        feat = QgsFeature()
        feat.setGeometry(polygon_geom)
        feat.setAttributes([''])
        out_prov.addFeatures([feat])
        out_lyr.commitChanges()
        out_lyr.updateExtents()
        self.iface.mapCanvas().setExtent(out_lyr.extent())
        self.iface.mapCanvas().refresh()

    def add_polygon_line_feature(self, ftype, fgeom, fname):
        """ Add feature to layer
        :param: boundary: list, list of QgsPoint objects
        """
        if ftype == 'POLYGON':
            out_lyr = QgsProject.instance().mapLayersByName(self.polygon_mlyr_name)[0]


        self.iface.setActiveLayer(out_lyr)
        out_lyr = self.iface.activeLayer()
        out_lyr.startEditing()
        out_prov = out_lyr.dataProvider()
        feat = QgsFeature()
        feat.setGeometry(fgeom)
        feat.setAttributes([fname])
        out_prov.addFeatures([feat])
        out_lyr.commitChanges()
        out_lyr.updateExtents()
        self.iface.mapCanvas().setExtent(out_lyr.extent())
        self.iface.mapCanvas().refresh()

    """ Sets coordinate pair format """

    def set_coord_order(self):
        if self.dlg.comboBoxCoordOrder.currentIndex() == 0:
            self.coord_order = None
        if self.dlg.comboBoxCoordOrder.currentIndex() == 1:
            self.coord_order = cet.ORDER_LATLON
        elif self.dlg.comboBoxCoordOrder.currentIndex() == 2:
            self.coord_order = cet.ORDER_LONLAT

    def set_latlon_separator(self):
        if self.dlg.comboBoxCoordSeparator.currentIndex() == 0:
            self.dlg.lineEditUserSeparator.setEnabled(False)
            self.latlon_separator = None
        elif self.dlg.comboBoxCoordSeparator.currentIndex() == 1:  # Null separator
            self.dlg.lineEditUserSeparator.setEnabled(False)
            self.latlon_separator = cet.SEP_NULL
        elif self.dlg.comboBoxCoordSeparator.currentIndex() == 2:  # Space
            self.dlg.lineEditUserSeparator.setEnabled(False)
            self.latlon_separator = cet.SEP_SPACE
        elif self.dlg.comboBoxCoordSeparator.currentIndex() == 3:  # Hyphen
            self.dlg.lineEditUserSeparator.setEnabled(False)
            self.latlon_separator = cet.SEP_HYPHEN
        elif self.dlg.comboBoxCoordSeparator.currentIndex() == 4:
            self.dlg.lineEditUserSeparator.setEnabled(False)
            self.latlon_separator = cet.SEP_SLASH
        elif self.dlg.comboBoxCoordSeparator.currentIndex() == 5:
            self.dlg.lineEditUserSeparator.setEnabled(False)
            self.latlon_separator = '\\'
        elif self.dlg.comboBoxCoordSeparator.currentIndex() == 6:
            self.dlg.lineEditUserSeparator.setEnabled(True)
            self.latlon_separator = self.dlg.lineEditUserSeparator.text()

    def set_coordinate_format(self):
        if self.dlg.comboBoxCoordFormat.currentIndex() == 0:
            self.coordinate_format = None
        elif self.dlg.comboBoxCoordFormat.currentIndex() == 1:
            self.coordinate_format = cet.DMSH_COMP
        elif self.dlg.comboBoxCoordFormat.currentIndex() == 2:
            self.coordinate_format = cet.HDMS_COMP
        elif self.dlg.comboBoxCoordFormat.currentIndex() == 3:
            self.coordinate_format = cet.DMSH_SEP
        elif self.dlg.comboBoxCoordFormat.currentIndex() == 4:
            self.coordinate_format = cet.HDMS_SEP

    def get_geometry_type(self):
        if self.dlg.comboBoxFeatureType.currentIndex() == 0:
            return agt.GEOM_POINT
        elif self.dlg.comboBoxFeatureType.currentIndex() == 1:
            return agt.GEOM_LINE
        elif self.dlg.comboBoxFeatureType.currentIndex() == 2:
            return agt.GEOM_POLYGON

    def get_sample_coord_pair_format(self):
        self.set_coord_order()
        self.set_latlon_separator()
        self.set_coordinate_format()
        if self.coord_order is not None and self.latlon_separator is not None and self.coordinate_format is not None:
            sample_format = get_sample_coordinates(self.coord_order,
                                                   self.latlon_separator,
                                                   self.coordinate_format)
            self.dlg.labelCoordExample.setText(sample_format)
        else:
            self.dlg.labelCoordExample.setText("Choose to see format example")

    def extract_coordinates(self):
        self.set_coord_order()
        self.set_latlon_separator()
        self.set_coordinate_format()
        self.dlg.tableWidgetCoordinates.setRowCount(0)
        raw_text = self.dlg.textEditRawText.toPlainText()
        coord_regex = cet.CoordRegexBuilder(self.coord_order, self.coordinate_format, self.latlon_separator)
        extracted_coord = cet.CoordinateExtractor(raw_text, coord_regex)
        coord_list = extracted_coord.get_coord_pair_list()
        for coord in coord_list:
            if self.coord_order == cet.ORDER_LATLON:
                row_pos = self.dlg.tableWidgetCoordinates.rowCount()
                self.dlg.tableWidgetCoordinates.insertRow(row_pos)
                self.dlg.tableWidgetCoordinates.setItem(row_pos, 0, QTableWidgetItem(coord[0]))
                self.dlg.tableWidgetCoordinates.setItem(row_pos, 1, QTableWidgetItem(coord[2]))
            elif self.coord_order == cet.ORDER_LONLAT:
                row_pos = self.dlg.tableWidgetCoordinates.rowCount()
                self.dlg.tableWidgetCoordinates.insertRow(row_pos)
                self.dlg.tableWidgetCoordinates.setItem(row_pos, 0, QTableWidgetItem(coord[2]))
                self.dlg.tableWidgetCoordinates.setItem(row_pos, 1, QTableWidgetItem(coord[0]))

    def create_feature(self):
        self.dlg.textEditRawTextWKRTString.clear()
        self.dlg.tableWidgetCoordinates.setRowCount(0)
        self.extract_coordinates()

        feat_name = self.dlg.lineEditFeatureName.text()

        if self.point_mlyr_name == '':
            self.point_mlyr_name = 'POINT'

        if self.line_mlyr_name == '':
            self.line_mlyr_name == 'LINE'

        if self.polygon_mlyr_name == '':
            self.polygon_mlyr_name = 'POLYGON'

        layers = QgsProject.instance().layerTreeRoot().children()
        layers_list = []  # List of layers in current (opened) QGIS project
        for layer in layers:
            layers_list.append(layer.name())

        # A list in which QgsPoints will be stored
        points = []
        # Get number of extracted points
        points_count = self.dlg.tableWidgetCoordinates.rowCount()

        for i in range(0, points_count):
            point_coordinates = agt.CoordinatesPair(self.dlg.tableWidgetCoordinates.item(i, 0).text(),
                                                    self.dlg.tableWidgetCoordinates.item(i, 1).text())

            if point_coordinates.is_valid is True:
                point = QgsPointXY(point_coordinates.lon_dd, point_coordinates.lat_dd)
                points.append(point)

        wkt_str = ''
        feat = QgsFeature()

        geom_type = self.get_geometry_type()

        if geom_type == agt.GEOM_POINT:
            if self.point_mlyr_name not in layers_list:
                self.create_mlyr(self.point_mlyr_name, 'POINT')

            wkt_str = ''.join([point_item.asWkt() for point_item in points])

            out_lyr = QgsProject.instance().mapLayersByName(self.point_mlyr_name)[0]
            self.iface.setActiveLayer(out_lyr)

            # There might be many points so first started editing of the point layer
            # add points in the loop to layer and at the and commit changes
            out_lyr.startEditing()
            out_prov = out_lyr.dataProvider()
            point_nr = 0
            for point_item in points:
                point_nr += 1
                point_name = '{}-{}'.format(feat_name, point_nr)
                point_geom = QgsGeometry.fromPointXY(point_item)
                feat.setGeometry(point_geom)
                feat.setAttributes([point_name])
                out_prov.addFeatures([feat])

            out_lyr.commitChanges()
            out_lyr.updateExtents()
            self.iface.mapCanvas().setExtent(out_lyr.extent())
            self.iface.mapCanvas().refresh()

        elif geom_type == agt.GEOM_LINE:
            line_geom = QgsGeometry.fromPolylineXY(points)
            wkt_str = line_geom.asWkt()

        elif geom_type == agt.GEOM_POLYGON:
            if self.polygon_mlyr_name not in layers_list:
                self.create_mlyr(self.polygon_mlyr_name, 'POLYGON')

            polygon_geom = QgsGeometry.fromPolygonXY([points])
            wkt_str = polygon_geom.asWkt()
            #self.add_polygon_feature(polygon_geom)
            self.add_polygon_line_feature('POLYGON', polygon_geom, feat_name)

        self.dlg.textEditRawTextWKRTString.append(wkt_str)

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
